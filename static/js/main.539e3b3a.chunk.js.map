{"version":3,"sources":["components/Users/users.module.css","assets/images/user.png","api/api.js","components/Navbar/Navbar.module.css","components/common/FormControls/FormControls.module.css","serviceWorker.js","redux/sidebar-reducer.js","utils/object-helpers.js","redux/users-reducer.js","redux/auth-reducer.js","redux/app-reducer.js","redux/redux-store.js","components/Navbar/Navbar.jsx","components/common/Paginator/Paginator.jsx","components/Users/User.jsx","components/Users/Users.jsx","redux/users-selectors.js","components/Users/UsersContainer.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","App.js","index.js","components/common/FormControls/FormControls.js","components/common/Loading/Global/index.js","components/common/Paginator/Paginator.module.css","utils/validators/validators.js","components/Header/Header.module.css","redux/profile-reducer.js","redux/dialogs-reducer.js"],"names":["module","exports","instance","axios","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","Boolean","window","location","hostname","match","initialState","sidebarReducer","state","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","followSuccess","type","unfollowSuccess","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","action","followed","count","filter","id","SET_USER_DATA","isAuth","setAuthUserData","payload","getAuthUserData","authReducer","initialized","appReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","sidebar","usersPage","auth","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","href","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","cn","selectedPage","pageNumber","key","e","User","user","src","photos","small","userPhoto","alt","disabled","some","name","Users","props","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","requestUsers","setCurrentPage","this","React","Component","connect","bind","page","totalCount","Header","header","loginBlock","HeaderContainer","LoginReduxForm","reduxForm","handleSubmit","error","onSubmit","createField","required","Input","style","formSummaryError","message","messages","length","stopSubmit","_error","formData","DialogsContainer","lazy","ProfileContainer","App","initializeApp","Suspense","fallback","path","render","AppContainer","withRouter","promise","Promise","all","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","FormControl","input","meta","touched","children","hasError","formControl","TextArea","restProps","child","placeholder","validators","component","text","validate","Preloader","value","maxLengthCreator","maxLength","posts","likesCount","profile","addPostActionCreator","newPostText","setStatus","getUserProfile","newPost","postId","dialogs","sendMessageCreator","newMessageBody","body"],"mappings":"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","file":"static/js/main.539e3b3a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__3gZ4w\"};","module.exports = __webpack_public_path__ + \"static/media/user.624e0082.png\";","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\"API-KEY\" : \"32499b22-7336-4625-a639-3d8bf3c0c330\"}\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId) {\r\n        console.warn('Obsolete method. Please use profileAPI object.')\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put(`profile/status`, {status: status});\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email, password, rememberMe = false) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe })\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3KO7G\",\"item\":\"Navbar_item__1x1ob\",\"activeLink\":\"Navbar_activeLink__OszpX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__dRVbh\",\"error\":\"FormControls_error__oJNsP\",\"formSummaryError\":\"FormControls_formSummaryError__3sr36\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","let initialState = {};\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","\r\nexport const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map (u => {\r\n        if(u[objPropName] === itemId) {//u[\"id\"], можно через точку: u.id\r\n            return { ...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n\r\n","import {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                //users: [...state.users],\r\n                users : updateObjectInArray(state.users, action.userId, \"id\",  {followed: true})\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users : updateObjectInArray(state.users, action.userId, \"id\",  {followed: false})\r\n                /*users: state.users.map( u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                } )*/\r\n            }\r\n\r\n        case SET_USERS:\r\n            //return { ...state, users: [...state.users, ...action.users]}//дописываем новых пользователей в конец массива\r\n            return { ...state, users: action.users}\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return { ...state, currentPage: action.currentPage}\r\n\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return { ...state, totalUsersCount: action.count }\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return { ...state, isFetching: action.isFetching }\r\n\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return { ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : [...state.followingInProgress.filter(id => id !== action.userId)]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n//ActionCreators:\r\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId })//return в круглых скобках возвращаемый объект\r\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId })\r\nexport const setUsers = (users) => ({ type: SET_USERS, users })\r\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage })\r\nexport const setTotalUsersCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\nexport const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching })\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\r\n\r\nexport const requestUsers = (page, pageSize) => {//getUsersThunkCreator\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        //dispatch(setCurrentPage(page));\r\n\r\n        let data  = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId) => {//return thunk(thunkCreator)\r\n    return async (dispatch) => {\r\n        let apiMethod = usersAPI.follow.bind(usersAPI);\r\n        followUnfollowFlow(dispatch, userId, apiMethod, followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId) => {//return thunk(thunkCreator)\r\n    return async (dispatch) => {\r\n        let apiMethod = usersAPI.unfollow.bind(usersAPI);\r\n        followUnfollowFlow(dispatch, userId, apiMethod, unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({type: SET_USER_DATA, payload:\r\n        {userId, email, login, isAuth}});\r\n\r\nexport const getAuthUserData = () => async (dispatch) => {//return thunk(thunkCreator)\r\n    let response = await authAPI.me(); // значение, которым promise зарезолвился(resolve)\r\n    if (response.data.resultCode === 0) {\r\n        //debugger\r\n        let {id, login, email} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {//return thunk(thunkCreator)\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n    if (response.data.resultCode === 0) {\r\n        //debugger\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        let action = stopSubmit(\"login\", {_error: message});\r\n        dispatch(action);\r\n    }\r\n}\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n\r\n//версия на .then\r\n/*export const getAuthUserData = () => (dispatch) => {//return thunk(thunkCreator)\r\n    return authAPI.me() // return - для того, чтобы promise вернулся наружу\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, login, email} = response.data.data;\r\n                dispatch(setAuthUserData(id, email, login, true));\r\n            }\r\n        });\r\n}*/\r\n","import {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS});\r\nexport const initializeApp = () => (dispatch) => {//return thunk(thunkCreator)\r\n    let promise = dispatch(getAuthUserData());//диспатчим санку----результ вызова санки----promise\r\n    //debugger\r\n    //promise.then(() => {dispatch(initializedSuccess())})//один promise\r\n    Promise.all([promise]).then(() => {//все промисы из массива(если присутствует несколько dispatch)\r\n        dispatch(initializedSuccess());\r\n    });\r\n}\r\n\r\n/*export const initializeApp = () => async (dispatch) => {\r\n    await dispatch(getAuthUserData());\r\n    dispatch(initializedSuccess());\r\n};*/\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n//let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n//let classesNew = `${s.item} ${s.active}`\r\n//console.log(s);\r\n\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={`${s.item} ${s.active}`}>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={`${s.item} ${s.active}`}>\r\n            <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a href=\"/\">News</a>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a href=\"/\">Music</a>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a href=\"/\">Settings</a>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\nlet Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize=20}) => {\r\n    //portionSize - колич-во кнопок paginator-а на странице\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);//сколько страниц\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);//размер порции\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() =>{setPortionNumber(portionNumber-1)}}>PREV</button> }\r\n\r\n        {pages\r\n            .filter(p => p>=leftPortionPageNumber && p <=rightPortionPageNumber)\r\n            .map(p => {\r\n            return <span className={ cn({\r\n                [styles.selectedPage] : currentPage === p\r\n            }, styles.pageNumber ) }\r\n                         key={p}\r\n                         onClick={(e) => {\r\n                             onPageChanged(p)\r\n                         }}>{p}</span>\r\n        })}\r\n\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {setPortionNumber(portionNumber+1) }}>NEXT</button>}\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nlet User = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={`/profile/${user.id}`}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto} alt=\"\"/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => { unfollow(user.id) }}>\r\n                            Unfollow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => { follow(user.id) }}>\r\n                            Follow</button>}\r\n                </div>\r\n            </span>\r\n                <span>\r\n                <div>{user.name}</div>\r\n                <div>{user.status}</div>\r\n            </span>\r\n                <span>\r\n                <div>{\"u.location.country\"}</div>\r\n                <div>{\"u.location.city\"}</div>\r\n            </span>\r\n        </div>)\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\nlet Users = ({currentPage, totalUsersCount, pageSize, onPageChanged, users, ...props}) => {\r\n    return <div>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User key={u.id}\r\n                                     user={u}\r\n                                     followingInProgress={props.followingInProgress}\r\n                                     unfollow={props.unfollow}\r\n                                     follow={props.follow}\r\n                />)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Users;","import {createSelector} from \"reselect\";\r\n\r\nconst getUsersPrimitive = (state) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersPrimitive, (users) => {\r\n    return users.filter(u => true);\r\n});\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {follow, requestUsers, setCurrentPage, toggleFollowingProgress, unfollow} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Loading from \"../common/Loading/Global/index\"\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\n//вторая контейнерная компонента\r\nclass UsersContainer extends React.Component {\r\n    /*constructor(props) {//если конструктор не делает ничего своего, а только передаёт props для базового класса, то конструктор можно опустить\r\n        super(props);\r\n    }*/\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props;// в классовых компонентах лучше доставать значения из props-ов с помощью деструктуризации\r\n        this.props.requestUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        const {pageSize} = this.props\r\n        this.props.requestUsers(pageNumber, pageSize);\r\n        this.props.setCurrentPage(pageNumber);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n        { this.props.isFetching ? <Loading /> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n//первая контейнерная компонента, будет вызвана сначала по default-у, затем она вызовет вторую(второй вызов connect)\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n/*export default withAuthRedirect(connect(mapStateToProps,  {//автоматическое оборачиваение callback-ми перечисленных значений - как в mapDispatchToProps\r\n    follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsers\r\n}) (UsersContainer));*/\r\n\r\nexport default compose(\r\n    //withAuthRedirect,\r\n    connect(mapStateToProps, {follow, unfollow, setCurrentPage, toggleFollowingProgress, requestUsers})\r\n) (UsersContainer)\r\n\r\n/*let mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId));\r\n        },\r\n        unfollow: (userId) => {\r\n          dispatch(unfollowAC(userId));\r\n        },\r\n        setUsers: (users) => {\r\n          dispatch(setUsersAC(users));\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount) => {\r\n            dispatch(setUsersTotalCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/\r\n\r\n//export default connect(mapStateToProps, mapDispatchToProps) (UsersContainer);","import React from 'react';\r\nimport s from'./Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return <header className={s.header}>\r\n        <img src='https://cdn.clipart.email/b4367ebba5ed26a80bfe0566603517d7_company-logo-transparent-png-clipart-free-download-ywd_450-450.png' alt=\"\"/>\r\n\r\n        <div className={s.loginBlock}>\r\n            { props.isAuth\r\n                ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                : <NavLink to={'login'}>Login</NavLink> }\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n    render() {\r\n        //debugger\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\nexport default connect(mapStateToProps, {logout}) (HeaderContainer);","import React from 'react';\r\nimport {reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormControls/FormControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from \"./../common/FormControls/FormControls.module.css\"\r\n\r\nconst LoginForm = ({handleSubmit, error}) => {//деструктуризация сразу из props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            {createField(\"Email\", \"email\", [required], Input)}\r\n            {createField(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n            {/*<Field component={Input} placeholder={\"Email\"} name={\"email\"} validate={[required]}/>*/}\r\n            {/*<div><Field component={Input} placeholder={\"Password\"} name={\"password\"}  type={\"password\"} validate={[required]}/></div>*/}\r\n            {/*<div><Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/>remember me</div>*/}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login' // a unique name for the form\r\n})(LoginForm)\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Loading/Global\";\r\nimport store from \"./redux/redux-store\";\r\n//import {withSuspense} from \"./components/hoc/withSuspense\";\r\n//import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\n//import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader />\r\n        }\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    {/* <Route path='/dialogs' component={Dialogs}/>\r\n                        <Route path='/profile' component={Profile}/>*/}\r\n                    {/*<Route path='/dialogs'\r\n                           render={() => {\r\n                               return <React.Suspense fallback={<Preloader/>}>\r\n                                   <DialogsContainer/>\r\n                               </React.Suspense>\r\n                           }}/>*/}\r\n                    {/*<Route path='/dialogs'\r\n                           render={withSuspense(DialogsContainer)}/>*/}\r\n                    <React.Suspense fallback={<Preloader/>}>\r\n                        <Route path='/dialogs'\r\n                               render={() => <DialogsContainer/>}/>\r\n                        <Route path='/profile/:userId?'\r\n                               render={() => <ProfileContainer/>}/>\r\n                        <Route path='/users'\r\n                               render={() => <UsersContainer/>}/>\r\n                        <Route path='/login'\r\n                               render={() => <Login/>}/>\r\n                    </React.Suspense>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nlet AppContainer = compose(\r\n    withRouter,//наша компонента обязана уже быть обёрнута BrowserRouter, иначе не сработает withRouter\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nlet SamuraiJSApp = (props) => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\n\r\nexport default SamuraiJSApp;\r\n","import * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/redux-store\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport SamuraiJSApp from \"./App\";\r\n\r\n//this у addPost при вызове будет указывать на props, поэому надо привязать нужный нам this через bind(store)\r\n\r\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\r\n\r\n/*store.subscribe(() => {\r\n    let state = store.getState();\r\n    rerenderEntireTree(state);\r\n});*/\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport styles from \"./FormControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\n//какие св-ва берём из meta { sourceProperty: targetVariable }\r\nexport const FormControl = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return(\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n                {/*<props.typeField {...input} {...props}/>*/}\r\n            </div>\r\n            { hasError && <span>{error}</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>)\r\n\r\nexport const TextArea2 = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return(\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                <textarea {...input} {...props} />\r\n            </div>\r\n            { hasError && <span>{meta.error}</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input2 = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return(\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            { hasError && <span>{meta.error}</span> }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Preloader = () => {\r\n  return (\r\n    <div className=\"global-loader-background\">\r\n      <div className=\"global-loader\">\r\n        <div className=\"global-loading\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__20T72\",\"pageNumber\":\"Paginator_pageNumber__1JjJs\",\"selectedPage\":\"Paginator_selectedPage__3UK9K\"};","\r\nexport const required = value => {\r\n    if(value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {//используется замыкание\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3EUvt\",\"loginBlock\":\"Header_loginBlock__3DzTR\"};","import {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\n//const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you', likesCount: 12},\r\n        {id: 2, message: \"It's my first post\", likesCount: 11},\r\n        {id: 3, message: \"Blabla\", likesCount: 11},\r\n        {id: 4, message: \"Dada\", likesCount: 11}\r\n    ],\r\n    //newPostText: 'it-kamasutra.com',\r\n    profile: null,\r\n    status: \"\"\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case  ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                //newPostText: ''\r\n            };\r\n            // stateCopy.posts = [...state.posts];//работает и без копирования\r\n            // stateCopy.posts.push(newPost);\r\n            // stateCopy.newPostText='';\r\n        }\r\n        /*case UPDATE_NEW_POST_TEXT: {\r\n            return { ...state, newPostText: action.newText }; }*/\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case SET_USER_PROFILE:\r\n            return {...state, profile: action.profile}\r\n        case DELETE_POST:\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText) => ({ type: ADD_POST, newPostText })//return в круглых скобках возвращаемый объект\r\nexport const setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile })\r\nexport const setStatus = (status) => ({type: SET_STATUS, status})\r\nexport const deletePost = (postId) => ({type: DELETE_POST, postId})\r\n\r\nexport const getUserProfile = (userId) => async (dispatch) => {\r\n    const response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data));\r\n};\r\n\r\nexport const getStatus = (userId) => async (dispatch) => {\r\n    const response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data));\r\n\r\n};\r\n\r\nexport const updateStatus = (status) => async (dispatch) => {\r\n    const response = await profileAPI.updateStatus(status);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n};\r\n\r\n//export const updateNewPostTextActionCreator = (text) => ({type: UPDATE_NEW_POST_TEXT, newText: text})\r\nexport default profileReducer;\r\n\r\n//версия на .then\r\n/*export const getUserProfile = (userId) => (dispatch) => {\r\n    usersAPI.getProfile(userId).then(response => {\r\n        dispatch(setUserProfile(response.data));\r\n    })\r\n};*/","//const UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY';\r\nconst SEND_MESSAGE = 'SEND-MESSAGE';\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrey'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ],\r\n    //newMessageBody: \"\"\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        /*case UPDATE_NEW_MESSAGE_BODY:{\r\n            //stateCopy.newMessageBody = action.body;\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            };\r\n        }*/\r\n        case SEND_MESSAGE:{\r\n            let body = action.newMessageBody;\r\n            //stateCopy.newMessageBody = '';\r\n            //stateCopy.messages = [...state.messages, {id: 6, message: body}];//работает и без создания нового объекта\r\n            //stateCopy.messages.push({id: 6, message: body});\r\n            return {\r\n                ...state,\r\n                //newMessageBody: '',\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody) => ({ type: SEND_MESSAGE, newMessageBody })\r\n//export const updateNewMessageBodyCreator = (text) => ({type: UPDATE_NEW_MESSAGE_BODY, body: text})\r\n\r\nexport default dialogsReducer;"],"sourceRoot":""}